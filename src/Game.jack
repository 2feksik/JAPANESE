class Game{
	field int selectedCellX, selectedCellY;
	field Level level;
	field boolean isWon;


	constructor Game new(int levelNumber){
		let isWon = false;
		let level = Level.new(levelNumber);
		let selectedCellX = 0;
		let selectedCellY = 0;
		return this;
	}


    method boolean isWon(){
        return isWon;
    }

	method void start(){
		var int key;
		do UI.drawNonogram(level.rows(), level.columns());
		do UI.selectEmptyCell(0, 0);
		while (true){
			let key = Keyboard.readChar();
			if (key = 132 & selectedCellX < level.width() - 1){
				do moveRight();
			}

			if (key = 130 & selectedCellX > 0){
				do moveLeft();
			}

			if (key = 131 & selectedCellY > 0){
				do moveUp();
			}

			if (key = 133 & selectedCellY < level.height() - 1){
				do moveDown();
			}

			if (key = 128){
				let isWon = true;
				do level.dispose();
				return;
			}
		}
		return;
	}

	method void moveRight(){
		do UI.clearCell(selectedCellX, selectedCellY);
		let selectedCellX = selectedCellX + 1;
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		return;
	}

	method void moveLeft(){
		do UI.clearCell(selectedCellX, selectedCellY);
		let selectedCellX = selectedCellX - 1;
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		return;
	}

	method void moveUp(){
		do UI.clearCell(selectedCellX, selectedCellY);
		let selectedCellY = selectedCellY - 1;
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		return;
	}

	method void moveDown(){
		do UI.clearCell(selectedCellX, selectedCellY);
		let selectedCellY = selectedCellY + 1;
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		return;
	}


}