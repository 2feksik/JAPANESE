class Game{
	field int selectedCellX, selectedCellY;
	field Level level;
	field boolean isWon;


	constructor Game new(int levelNumber){
		let isWon = true;
		let level = Level.new(levelNumber);
		let selectedCellX = 0;
		let selectedCellY = 0;
		return this;
	}


    method boolean isWon(){
        return isWon;
    }

	method int selectedCell(){
		return selectedCellY * level.width() + selectedCellX;
	}

	method void start(){
		var int key;
		do UI.drawLevel();
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		do Sys.wait(250);
		while (true){
			let key = Keyboard.keyPressed();
			// перемещение по "полю"
			if (key = 132){//right
				do move(1, 0);
				do Sys.wait(250);
			}
			if (key = 130){//left
				do move(-1, 0);
				do Sys.wait(250);
			}
			if (key = 131){//up
				do move(0, -1);
				do Sys.wait(250);
			}
			if (key = 133){//down
				do move(0, 1);
				do Sys.wait(250);
			}

			//закрашивание/отбеливание клетки
			if (key = 32){
				do paintOrEraseCell();
				do Sys.wait(250);
			}

			//конец
			if (key = 128){
				do checkSolution();
				do Screen.clearScreen();
				if (isWon){
					do UI.drawWinScreen("it was a jiraf");
				} else {
					do UI.drawLoseScreen();
				}
				do level.dispose();
				do Sys.wait(250);
				return;
			}
		}
		return;
	}

	method void move(int deltaX, int deltaY){
		var Array sol;
		let sol = level.solution();
		if (sol[selectedCell()]){
			do UI.paintCell(selectedCellX, selectedCellY);
		} else {
			do UI.clearCell(selectedCellX, selectedCellY);
		}

		if (((selectedCellX + deltaX) < level.width()) & ((selectedCellX + deltaX) > -1)){
			let selectedCellX = selectedCellX + deltaX;
		}
		if (((selectedCellY + deltaY) < level.height()) & ((selectedCellY + deltaY) > -1)){
			let selectedCellY = selectedCellY + deltaY;
		}
		
		if (sol[selectedCell()]){
			do UI.selectPaintedCell(selectedCellX, selectedCellY);
		} else {
			do UI.selectEmptyCell(selectedCellX, selectedCellY);
		}
		return;
	}

	method void paintOrEraseCell(){
		var Array sol;
		let sol = level.solution();
		if (sol[selectedCell()]){
			let sol[selectedCell()] = false;
			do UI.selectEmptyCell(selectedCellX, selectedCellY);
		} else {
			let sol[selectedCell()] = true;
			do UI.selectPaintedCell(selectedCellX, selectedCellY);
		}
		return;
	}

	method void checkSolution(){
		var int i;
		var Array sol, expectedSol;
		let i = level.height() * level.width() - 1;
		let sol = level.solution();
		let expectedSol = level.expectedSolution();
		while (i > -1){
			if (~(sol[i] = expectedSol[i])){
				let isWon = false;
			}
			let i = i - 1;
		}
		return;
	}
}