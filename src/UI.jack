class UI {

	static int levelBeginRow, levelBeginCol, levelOffsetCol;
	static int number, height, width, widthLeftPanel, heightUpPanel;
	static Array digital;	

	function void clearScreen(){
	// просто очистка экрана
		do Screen.setColor(false);
		do Screen.clearScreen();
		return;
	}

	// функции отрисовки менюшек
	function void drawFrame(){
		//рисует рамку
		do Screen.setColor(true);
		//1 рамка
		do Screen.drawLine(5, 5, 506, 5);
		do Screen.drawLine(506, 5, 506, 250);
		do Screen.drawLine(5, 250, 506, 250);
		do Screen.drawLine(5, 5, 5, 250);
		// 2 рамка
		do Screen.drawLine(7, 7, 504, 7);
		do Screen.drawLine(504, 7, 504, 248);
		do Screen.drawLine(7, 248, 504, 248);
		do Screen.drawLine(7, 7, 7, 248);
		return;
	}

	function void drawMainMenu(){
	// нарисовать главную менюшку: название игры, "Press Enter to play", имена авторов (нас) и, если хочешь, любые визуальные приколюхи
		do UI.clearScreen();
		do UI.drawFrame();
		do Output.moveCursor(8, 24);
		do Output.printString("J A P A N E S E");
		do Output.moveCursor(21,3);
		do Output.printString("Authors: Izmaylova Aleksandra, Pavlova Anna");
		do Output.moveCursor(14,22);
		do Output.printString("Press Enter to play");
		return;
	}
	
	//если хочешь, можно разместить все 6 уровней на одной странице, тогда надо сделать только 1 из 2 следующих методов и убрать методы для стрелок
	function void drawSquareofSymbol(int i, int j, int n, boolean color){
		do Screen.setColor(color);
		do Screen.drawLine(j * 8 - n, i * 11 - n, 8 * (j + 1) + n,  i * 11 - n);
		do Screen.drawLine(8 * (j + 1) + n, i * 11 - n, 8 * (j + 1) + n, 11 * (i + 1) + n);
		do Screen.drawLine(j * 8 - n, 11 * (i + 1) + n, 8 * (j + 1) + n, 11 * (i + 1) + n);
		do Screen.drawLine(j * 8 - n, i * 11 - n, j * 8 - n, 11 * (i + 1) + n);
		return;
	}

	function void drawLevelMenu(){
	// нарисовать меню с выбором всех уровней
		var int i;
		let levelBeginRow = 15;
	    let levelBeginCol = 18;
		let levelOffsetCol = 6;
		do UI.clearScreen();
		do UI.drawFrame();
		do Output.moveCursor(5, 28);
		do Output.printString("LEVELS");
		let i = 0;
		while (i < 6) {
			do Output.moveCursor(levelBeginRow, i * levelOffsetCol + levelBeginCol);
			do Output.printInt(i + 1);
			do UI.drawSquareofSymbol(levelBeginRow, i * levelOffsetCol + levelBeginCol, 3, true);
			let i = i + 1;
		}
		return;
	}
	// функции выделения кнопок на менюшке уровней

	function void highlightSelectedLevel(int level){
	// выделить текущий уровень
	// это может быть закрашивание, добавление полосочки, доп обводка и что угодно из такого
	// можно разбить на 6 отдельных методов, либо передавать номер уровня сюда, хз как удобней будет
		var int i;
		let i = 0;
		// стираем предыдущий выбор 
		while (i < 6) {
			do UI.drawSquareofSymbol(levelBeginRow, i * levelOffsetCol + levelBeginCol, 5, false);
			let i = i + 1;
		}		
		do UI.drawSquareofSymbol(levelBeginRow, (level - 1) * levelOffsetCol + levelBeginCol, 5, true);		
		return;
	}

	// функции отрисовки уровней
	function void drawCell(int x, int y, int xsize, int ysize, boolean base1, boolean base2){ 
	 	do Screen.setColor(base1);
        do Screen.drawRectangle(x, y, x + xsize, y + ysize);
	 	do Screen.setColor(base2); 
        do Screen.drawRectangle(x+1, y+1, x + (xsize-1) , y + (ysize-1));
        return;
	}

	function void drawDigital(int x, int y, int d){
		var int i, j, pattern, dx, dy, dop;
		let j = 0;
		let dy = y;
		while (j < 11) {
			let i = 0;
			let dx = x;
			let pattern = 128;
			while (i < 8){
				do Screen.setColor(true);
				//let dop = digital[d * j + j] & pattern;
				if ((digital[d * 11 + j] & pattern) = 0){
					do Screen.setColor(false);						
				}
				do Screen.drawPixel(dx + i, dy + j);				
				let pattern = pattern / 2;
				let i = i + 1;
			}
			let j = j + 1;
		}
		return;
	}

	function void drawLevel(int numberLevel, int heightLevel, int widthLevel, int leftPanel, int UpPanel){ 
		var int i, j, xStart, yStart, x, y, xsize, ysize;
		var Array rows, columns;
		let number = numberLevel; 
		let height = heightLevel;
		let width = widthLevel; 
		let widthLeftPanel = leftPanel;
		let heightUpPanel = UpPanel; 

		let rows = Array.new((height + heightUpPanel) * widthLeftPanel);
        let rows[0] = 32;
        let rows[1] = 32;
        let rows[2] = 32;
        let rows[3] = 32;
        let rows[4] = 32;
		let rows[5] = 32;
		let rows[6] = 49;
        let rows[7] = 32;
        let rows[8] = 50;
        let rows[9] = 49;
        let rows[10] = 49;
        let rows[11] = 49;
		let rows[12] = 51;
		let rows[13] = 49;

		let columns = Array.new(width + widthLeftPanel);
        let columns[0] = 32;
        let columns[1] = 32;
        let columns[2] = 49;
        let columns[3] = 54;
        let columns[4] = 49;
        let columns[5] = 50;

		let digital = Array.new(33);
		// 0
		let digital[0] = 0;
		let digital[1] = 24;
		let digital[2] = 60;
		let digital[3] = 102;
		let digital[4] = 102;
		let digital[5] = 102;
		let digital[6] = 102;
		let digital[7] = 102;
		let digital[8] = 60;
		let digital[9] = 24;
		let digital[10] = 0;

		// 1
		let digital[11] = 0;
		let digital[12] = 24;
		let digital[13] = 56;
		let digital[14] = 120;
		let digital[15] = 24;
		let digital[16] = 24;
		let digital[17] = 24;
		let digital[18] = 24;
		let digital[19] = 24;
		let digital[20] = 126;
		let digital[21] = 0;

		// 2
		let digital[22] = 0;
		let digital[23] = 60;
		let digital[24] = 102;
		let digital[25] = 102;
		let digital[26] = 102;
		let digital[27] = 12;
		let digital[28] = 24;
		let digital[29] = 48;
		let digital[30] = 96;
		let digital[31] = 126;
		let digital[32] = 0;
		// 3
		// 4
		// 5
		// 6
		// 7
		// 8
		// 9

		//do UI.drawFrame();
  	    do Output.moveCursor(3, 29);
		do Output.printString("LEVEL ");
		do Output.printInt(number);

		let xsize = 16;
		let ysize = 16;
		let xStart = 232 - ((widthLeftPanel + width) * xsize / 2) - 4;
		let yStart = 110 - (height / 2);
		let i = 0;
		let j = 0;
		let x = 0;
		let y = 0;

		while (j < (height + heightUpPanel)) {
			let x = i * xsize + xStart;
			let y = j * ysize + yStart;
			do UI.drawCell(x, y, xsize, ysize, true, false);	
			let i = i + 1;
			if (i  = (width + widthLeftPanel)) {
				let i = 0;
				let j = j + 1;
				let x = 0;
				let y = 0;				
			}
		}

		let y = 110 / 11;
		//let x = 232 / 8 - 2;
		let x = (232 - ((widthLeftPanel + width) * xsize / 2)) / 8;
		let j = 0;
		let i = 0;
		while (j < heightUpPanel) {
			while (i < (width + widthLeftPanel)) {
				do Output.moveCursor(y, x);
				do Output.printChar(columns[i]);
				let x = x + 2;
				let i = i + 1;
			}
			let y = y + 2;
			let j = j + 1;
			let x = (232 - ((widthLeftPanel + width) * xsize / 2)) / 8;
			let i = 0;
		}

		let y = 110;
		let i = 0;
		while (i < (height + heightUpPanel)) {
			//let x = 232 / 8 - 3;
			let x = 232 - ((widthLeftPanel + width) * xsize / 2);
			//do Output.moveCursor(y, x);
			//do Output.printChar(rows[i]);
			do UI.drawDigital(x, y, 1);
			let x = x + 16;
			//do Output.printChar(rows[i + (height + heightUpPanel)]);
			do UI.drawDigital(x, y, 1);
			let i = i + 1;
			let y = y + 16;
		}
		do UI.drawDigital(0, 0, 2);

		do Output.moveCursor(0, 2);
		do Output.printString("2");

		return;
	}

	function void drawNonogram(Array rows, Array lines){
	// пока сама хз, как это лучше осуществить, но оно должно рисовать пустое прямоугольное поле для кроссворда и цифры к нему
	// на вход будут даны списки рядов и столбцов в любом удобном формате
	// если понадобится, можно добавить на вход высоту и ширину
		return;
	}


	// так как поля разных уровней разного размера, скорее всего клетки с одними и теми же координатами будут находиться в разных местах экрана на разных уровнях
	// если понадобится, можно передавать в метод номер уровня, чтобы в зависимости от него выбиралась точка отсчета на экране
	function void selectEmptyCell(int x, int y){
	// должно выделять пустую клетку на нарисованном поле по заданным координатам
	return;
	}
	function void selectPaintedCell(int x, int y){
	// должно выделять уже закрашенную клетку на нарисованном поле по заданным координатам
	return;
	}
	function void clearCell(int x, int y){
	// должно очищать клетку на нарисованном поле по заданным координатам
	return;
	}
	function void paintCell(int x, int y){
	// должно закрашивать клетку на нарисованном поле по заданным координатам
	return;
	}

	function void drawWinScreen(String str){
	// нарисовать экран при победе
	// например надпись "you won"
	// можно добавить слова с пояснение к картинке: "It was ..." (... передавать в метод, чтобы фраза отличалась в зависимости от уровня)
	return;
	}
	function void drawLoseScreen(){
	// нарисовать экран при победе
	// например надпись "you lose"
	return;
	}
}